import time
from datetime import datetime
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
from loguru import logger

# –í–∞—à–∏ API_ID –∏ API_HASH, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –Ω–∞ my.telegram.org
api_id = ''
api_hash = ''
phone = ''  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Telegram

# –ò–º—è –≤–∞—à–µ–≥–æ —Å–µ—Å—Å–∏–π–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω
session_name = 'session_name'

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª
channel_username = 'https://t.me/bananadeployerSOL'
output_file = 'call_analyser_pump.txt'
calls_file = 'calls_pump.txt'

# –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
destination_usernames = ['aaaa349'] 

keywords = ["Caller Stats"]  # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
target_length = 44  # –î–ª–∏–Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

logger.add("debug.log", format="{time} {level} {message}", level="DEBUG")

def extract_text_between_markers(text, start_marker, end_marker):
    start_idx = text.find(start_marker)
    if start_idx != -1:
        start_idx += len(start_marker)
        end_idx = text.find(end_marker, start_idx)
        if end_idx != -1:
            return text[start_idx:end_idx].strip()
    return ""

def contains_keywords(text, keywords):
    for keyword in keywords:
        if keyword in text:
            return True
    return True

def find_word_by_length_and_suffix(text, target_length, suffix):
    words = text.split()
    for word in words:
        if len(word) in {target_length, target_length-1, target_length+1} and word.endswith(suffix):
            return word
    return None

with TelegramClient(session_name, api_id, api_hash) as client:
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel = client.get_entity(channel_username)
    destinations = [client.get_entity(username) for username in destination_usernames]
    last_message_id = 0

    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
            history = client(GetHistoryRequest(
                peer=channel,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=200,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                max_id=0,
                min_id=last_message_id,
                hash=0
            ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if history.messages:
                with open(output_file, 'a', encoding='utf-8-sig') as f_all, open(calls_file, 'a', encoding='utf-8-sig') as f_calls:
                    for message in history.messages:
                        if message.id > last_message_id:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ call_analyser.txt
                            f_all.write(f"{message.date} - {message.sender_id} - {message.message}\n")
                            logger.info(f"Message logged: {message.date} - {message.sender_id} - {message.message}")

                            if message.message:
                                if contains_keywords(message.message, keywords):
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É ")" –∏ "üçå Type"
                                    extracted_text = extract_text_between_markers(message.message, ")", "üçå Type")
                                    logger.info(f"Extracted text: {extracted_text}")

                                    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ
                                    found_word = find_word_by_length_and_suffix(extracted_text, target_length, 'pump')
                                    if found_word:
                                        logger.info(f"Valid word found: {found_word}")
                                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ calls.txt
                                        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        for destination in destinations:
                                            client.send_message(destination, found_word)
                                            logger.info(f"Message sent to {destination.username}: {found_word}")
                                        f_calls.write(f"{message.date} - {current_time} - {message.sender_id} - {found_word}\n")
                                        logger.info(f"Valid call logged: {message.date} - {current_time} - {message.sender_id} - {found_word}")

                            last_message_id = message.id
            else:
                logger.warning("No new messages found.")
        except Exception as e:
            logger.error(f"An error occurred: {e}")

        # –û–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        time.sleep(2)
